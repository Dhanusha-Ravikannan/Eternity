// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum itemType {
  Gold 
  Silver 
}

model AddCustomer {
  id    Int    @id @default(autoincrement())
  name  String
  phoneNumber  String
  address String
  email String? @unique
  transcation CustomerTransaction[]

}

model AddCasting {
  id Int @id @default(autoincrement())
  name String
  phoneNumber String 
  address String 
  email String @unique

  Castings Casting[]
}

model AddFiling{
  id Int @id @default(autoincrement())
  name String
  phoneNumber String 
  address String 
  email String @unique
}

model AddSetting{
  id Int @id @default(autoincrement())
  name String
  phoneNumber String 
  address String 
  email String @unique
}

model AddBuffing{
  id Int @id @default(autoincrement())
  name String
  phoneNumber String 
  address String 
  email String @unique
}

model AddItem{
  id Int @id @default(autoincrement())
  name String
  
}

model AddSupplierItem{
  id Int @id @default(autoincrement())
  name String
  email String  @unique
  phoneNumber String
  address String 
}

model AddPurchaseStock{
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  item itemType
  goldWeight Int?
  goldTouch Float?
  goldPurity Float?
  goldRate Float?
  goldtotalValue Float?
  silverWeight Int?
  silverTouch Float?
  silverPurity Float?
  silverRate Float?
  silvertotalValue Float?

}


model Casting {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  name String
  givenGold Float
  givenTouch Float
  purity Float
  finalTouch Float
  pureValue Float
  copper Float
  finalWeight Float 
  afterWeight Float
  wastage Float
  castingId Int
  addcastings AddCasting @relation(fields: [castingId], references: [id])
  scrapitems CastingScrapItem[]
  items CastingItem[]

}

model CastingItem {
  id Int @id @default(autoincrement())
  castingId Int
  item String           
  weight Float      
  touch Float         
  purity Float        
  remarks String 
  castings Casting @relation(fields: [castingId], references: [id])
  scrapitems CastingScrapItem[]

}

model CastingScrapItem {
  id Int @id @default(autoincrement())
  castingId Int 
  item String
  weight Float
  touch Float
  purity Float
  remarks String
  castings CastingItem @relation(fields: [castingId], references: [id])
  casting Casting[]
}


model CustomerTransaction {
  id         Int       @id @default(autoincrement())
  date       DateTime
  value      Float
  type       String 
  touch      Float?
  purity     Float?
  goldRate    Float?
  customer   AddCustomer  @relation(fields: [customerId], references: [id])
  customerId Int
  createdAt  DateTime  @default(now())
}






